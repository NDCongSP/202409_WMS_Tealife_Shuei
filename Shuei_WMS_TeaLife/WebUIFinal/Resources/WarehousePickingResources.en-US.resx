<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PickingNo" xml:space="preserve">
    <value>Picking No.</value>
  </data>
  <data name="WarehousePicking" xml:space="preserve">
    <value>Warehouse Picking </value>
  </data>
  <data name="ShipmentNo" xml:space="preserve">
    <value>Shipment No.</value>
  </data>
  <data name="InstructionNumber" xml:space="preserve">
    <value>Instruction Number </value>
  </data>
  <data name="From" xml:space="preserve">
    <value>From </value>
  </data>
  <data name="To" xml:space="preserve">
    <value>To </value>
  </data>
  <data name="DeliveryLocation" xml:space="preserve">
    <value>Delivery Location </value>
  </data>
  <data name="OutgoingBin" xml:space="preserve">
    <value>Outgoing Bin </value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location </value>
  </data>
  <data name="PickedDate" xml:space="preserve">
    <value>Picked Date </value>
  </data>
  <data name="PlanShipDate" xml:space="preserve">
    <value>Plan Ship Date </value>
  </data>
  <data name="PickingDetail" xml:space="preserve">
    <value>Picking Detail</value>
  </data>
  <data name="Shipments" xml:space="preserve">
    <value>Shipments</value>
  </data>
  <data name="OrderNo" xml:space="preserve">
    <value>Order No</value>
  </data>
  <data name="TotalQuantity" xml:space="preserve">
    <value>Total Quantity</value>
  </data>
  <data name="Tenant" xml:space="preserve">
    <value>Tenant</value>
  </data>
  <data name="DeliveryCompany" xml:space="preserve">
    <value>Delivery Company</value>
  </data>
  <data name="OrderDate" xml:space="preserve">
    <value>Order Date</value>
  </data>
  <data name="PickLine" xml:space="preserve">
    <value>Pick Lines</value>
  </data>
  <data name="HTSync" xml:space="preserve">
    <value>HT Sync</value>
  </data>
  <data name="ProductCode" xml:space="preserve">
    <value>Product Code</value>
  </data>
  <data name="ProductName" xml:space="preserve">
    <value>Product Name</value>
  </data>
  <data name="Unit" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="Bin" xml:space="preserve">
    <value>Bin</value>
  </data>
  <data name="PickQty" xml:space="preserve">
    <value>Pick Qty</value>
  </data>
  <data name="ActualQty" xml:space="preserve">
    <value>Actual Qty</value>
  </data>
  <data name="Remaining" xml:space="preserve">
    <value>Remark</value>
  </data>
  <data name="Keep" xml:space="preserve">
    <value>Keep</value>
  </data>
  <data name="Detail model is null" xml:space="preserve">
    <value>Detail model is null</value>
  </data>
  <data name="MustKeep" xml:space="preserve">
    <value>You must keep the pick before completing it</value>
  </data>
  <data name="InsufficientQuantity" xml:space="preserve">
    <value>, This pick has details that have not been picked in sufficient quantity</value>
  </data>
  <data name="completed" xml:space="preserve">
    <value>completed</value>
  </data>
  <data name="completion failed" xml:space="preserve">
    <value>completion failed</value>
  </data>
  <data name="DeleteNoti" xml:space="preserve">
    <value>Are you sure you want to delete?</value>
  </data>
  <data name="successfully" xml:space="preserve">
    <value>successfully</value>
  </data>
  <data name="Failed to delete" xml:space="preserve">
    <value>Failed to delete</value>
  </data>
  <data name="Product is required" xml:space="preserve">
    <value>Product is required</value>
  </data>
  <data name="No changes detected" xml:space="preserve">
    <value>No changes detected</value>
  </data>
  <data name="ErrorUpdate" xml:space="preserve">
    <value>An error occurred during the update</value>
  </data>
  <data name="MustComplete" xml:space="preserve">
    <value>You must complete the previous adjustments first</value>
  </data>
  <data name="Pick Cover Sheet" xml:space="preserve">
    <value>Pick Cover Sheet</value>
  </data>
  <data name="Failure" xml:space="preserve">
    <value>Failure</value>
  </data>
  <data name="DeleteWarning" xml:space="preserve">
    <value>The picking line will be deleted, and the assigned shipments will be unassigned.</value>
  </data>
  <data name="Lot" xml:space="preserve">
    <value>Lot</value>
  </data>
  <data name="Sync Completed" xml:space="preserve">
    <value>Sync Completed</value>
  </data>
  <data name="The synchronization has been successfully completed" xml:space="preserve">
    <value>The synchronization has been successfully completed.</value>
  </data>
  <data name="ExpirationDate" xml:space="preserve">
    <value>ExpirationDate</value>
  </data>
  <data name="CoverSheetNDeliveryNote" xml:space="preserve">
    <value>CoverSheetNDeliveryNote</value>
  </data>
  <data name="CompletedPickingSuccessfully" xml:space="preserve">
    <value>CompletedPickingSuccessfully</value>
  </data>
  <data name="PleaseSelectPicking" xml:space="preserve">
    <value>PleaseSelectPicking</value>
  </data>
  <data name="PickingDate" xml:space="preserve">
    <value>Picking Date</value>
  </data>
  <data name="Instruction" xml:space="preserve">
    <value>Instruction</value>
  </data>
  <data name="Picking" xml:space="preserve">
    <value>Picking</value>
  </data>
  <data name="Get location error" xml:space="preserve">
    <value>Get location error</value>
  </data>
  <data name="GetPickingSuccess" xml:space="preserve">
    <value>Get Picking Success</value>
  </data>
  <data name="Get Picking Failed" xml:space="preserve">
    <value>Get Picking Failed</value>
  </data>
  <data name="Could not found shipment no" xml:space="preserve">
    <value>Could not found shipment no</value>
  </data>
  <data name="Get bin error" xml:space="preserve">
    <value>Get bin error</value>
  </data>
  <data name="Go to packing" xml:space="preserve">
    <value>Go to packing</value>
  </data>
  <data name="Get Picking line successfully" xml:space="preserve">
    <value>Get Picking line successfully</value>
  </data>
  <data name="Get Picking line failed" xml:space="preserve">
    <value>Get Picking line failed</value>
  </data>
</root>