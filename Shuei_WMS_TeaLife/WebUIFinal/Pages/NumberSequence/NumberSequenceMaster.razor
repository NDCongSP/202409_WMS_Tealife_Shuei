@page "/numbersequence"
@using Application.Extentions
@using FBT.ShareModels.WMS
@using Microsoft.AspNetCore.Authorization
@inject IStringLocalizer<CommonResources> _localizerCommon
@inject IStringLocalizer<NumberSequenceResources> _localizer
@inject IStringLocalizer<NotificationMessageResources> _localizerNotification

@attribute [Authorize(Policy = "AdminAndSystem")]
@if (_dataGrid == null)
{
    <p><em>@_localizerCommon["Loading"]...</em></p>
}
else
{
    <RadzenTemplateForm Data="@_searchModel" Submit="@((SearchModel args) => { OnSearch(args); })">
       <RadzenRow Gap="1rem" Class="padding-body-content">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenFieldset Text="@_localizerCommon["Search"]">
                    <RadzenStack Gap="5px">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="@_localizer["Journal Type"]" Variant="Variant.Outlined" Style="width:100%">
                                    <RadzenTextBox Name="journalType" @bind-Value="@_searchModel.journalType" Placeholder="Enter journal type" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="@_localizer["Prefix"]" Variant="Variant.Outlined" Style="width:100%">
                                    <RadzenTextBox Name="prefix" @bind-Value="@_searchModel.Prefix" Placeholder="Enter prefix" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="6" SizeSM="3">
                                <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" >
                                    <RadzenButton Variant="Variant.Flat" Text="@_localizerCommon["Search"]" Icon="search" ButtonType="Radzen.ButtonType.Submit" Size="ButtonSize.Large" />
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>

   <RadzenRow Gap="1rem" Class="padding-body-content">
        <RadzenColumn SizeXS="12" SizeMD="12">
            <RadzenStack>
                <RadzenFieldset Text="@_localizer["Number Sequence Manager"]">
                    <RadzenStack Orientation="Radzen.Orientation.Vertical" JustifyContent="Radzen.JustifyContent.Center" AlignItems="AlignItems.Stretch" Gap="5px">
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.End" AlignItems="AlignItems.Center" Gap="1rem" >
                            <RadzenButton Click=@(args => AddNewItemAsync()) Variant="Variant.Flat" Shade="Shade.Dark"
                                          Text="@_localizerCommon["Create"]" Icon="add_circle" ButtonStyle="ButtonStyle.Success" />
                        </RadzenStack>

                        <RadzenDataGrid Style="width:100%" Data="@filteredData" TItem="NumberSequences" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                        AllowPaging="true" PageSize="20" PageSizeText="@_localizerCommon["items per page"]" AllowSorting="true" AllowColumnPicking="false" EmptyText="@_localizerCommon["No records to display."]"
                                        AllowColumnResize="true" AllowGrouping="false" GridLines="Radzen.DataGridGridLines.Both" ShowPagingSummary="@_showPagerSummary" PagingSummaryFormat="@_pagingSummaryFormat" PageSizeOptions="@_pageSizeOptions">
                            <Columns>
                                <RadzenDataGridColumn Width="200px" Property="@nameof(NumberSequences.JournalType)" TextAlign="TextAlign.Center" CssClass="rz-grid-col-flex-start">
                                    <HeaderTemplate>
                                        @_localizer["Journal Type"]
                                    </HeaderTemplate>
                                    <Template Context="data">
                                        <NavLink class="nav-link" href="@($"/detailnumbersequence/{_localizerCommon["Detail.Edit"]} {_localizer["Number Sequence"]}|{data.Id}")" Match="NavLinkMatch.All" style="padding: 0!important;">
                                            @data.JournalType
                                        </NavLink>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="NumberSequences" Width="200px" Property="Prefix" Title="@_localizer["Prefix"]" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="NumberSequences" Width="200px" Property="SequenceLength" Title="@_localizer["Sequence Length"]" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="NumberSequences" Width="200px" Property="CurrentSequenceNo" Title="@_localizer["Current Sequence No."]" TextAlign="TextAlign.Center" />
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
}
@code {
    public class SearchModel
    {
        public string journalType { get; set; }
        public string Prefix { get; set; }
        public EnumStatus? Status { get; set; }
    }

    private bool isDisabled = false;
    private SearchModel _searchModel = new SearchModel();
    IEnumerable<NumberSequences> filteredData;

    private IEnumerable<NumberSequences> OnSearch(SearchModel args)
    {
        filteredData = _dataGrid;

        if (!string.IsNullOrEmpty(_searchModel.journalType))
        {
            filteredData = filteredData.Where(d => d.JournalType.Contains(_searchModel.journalType, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(_searchModel.Prefix))
        {
            filteredData = filteredData.Where(d => d.Prefix.Contains(_searchModel.Prefix, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        return filteredData;
    }
}
